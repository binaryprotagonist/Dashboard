{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.getPattern = getPattern;\nexports.processPattern = processPattern;\nexports.addTrailingNumber = addTrailingNumber;\n\nvar _data = _interopRequireDefault(require(\"../data.json\"));\n\nvar _random = require(\"./random\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _default() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  /* deprecations */\n\n  if (opts.numLen || opts.numLen === 0) {\n    console.log('namor: \"numLen\" is now deprecated, use \"numbers\" instead');\n    opts.numbers = opts.numLen;\n  }\n  /* generate the name */\n\n\n  var name = addTrailingNumber(processPattern(getPattern(opts.words), opts.char, opts.manly), opts.numbers, opts.char);\n  /* ensure final subdomain isn't too long */\n\n  if (name.length > 63) {\n    throw new Error('Subdomains cannot be longer than 63 characters! Try shortening your trailing number.');\n  }\n\n  return name;\n}\n/**\n * Returns a language pattern based on the word count of the name.\n * @param {integer} words - the number of words to use\n * @return {array} a list (in order) of the language pattern\n */\n\n\nfunction getPattern() {\n  var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  words = parseInt(words, 10);\n\n  if (words < 1) {\n    throw new Error('word count must be above 0');\n  }\n\n  if (words > 4) {\n    throw new Error('word count cannot be above 4');\n  }\n\n  var pattern;\n\n  switch (words) {\n    case 1:\n      pattern = ['noun'];\n      break;\n\n    case 2:\n      pattern = (0, _random.randomFromArray)([['adjective', 'noun'], ['noun', 'verb']]);\n      break;\n\n    case 3:\n      pattern = ['adjective', 'noun', 'verb'];\n      break;\n\n    case 4:\n      pattern = ['adjective', 'noun', 'noun', 'verb'];\n      break;\n  }\n\n  return pattern;\n}\n/**\n * Fills a language pattern with actual words from our dictionary,\n * and turns it into a pipe-cased string.\n * @param {array} pattern - the pattern to use\n * @return {string} the concated string\n */\n\n\nfunction processPattern(pattern, char, manly) {\n  var fills = pattern.map(function (type) {\n    var wordsToChooseFrom = manly ? _data.default.manly[\"\".concat(type, \"s\")] : _data.default[\"\".concat(type, \"s\")];\n    return (0, _random.randomFromArray)(wordsToChooseFrom);\n  });\n  return fills.join(char || '-');\n}\n/**\n * Generates and adds a random number to the end of a name.\n * @param {string} name - the name to append to\n * @param {integer} len - the length of the trailing number\n * @return {string} the new name\n */\n\n\nfunction addTrailingNumber(name) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';\n  len = parseInt(len, 10);\n\n  if (len < 0) {\n    throw new Error('number length must be above 0');\n  }\n\n  return name + (len ? char + (0, _random.randomNumber)(len) : '');\n}","map":{"version":3,"sources":["C:/Users/ATM/Desktop/Dash/node_modules/namor/dist/generate.js"],"names":["Object","defineProperty","exports","value","default","_default","getPattern","processPattern","addTrailingNumber","_data","_interopRequireDefault","require","_random","obj","__esModule","opts","arguments","length","undefined","numLen","console","log","numbers","name","words","char","manly","Error","parseInt","pattern","randomFromArray","fills","map","type","wordsToChooseFrom","concat","join","len","randomNumber"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;AACAH,OAAO,CAACI,UAAR,GAAqBA,UAArB;AACAJ,OAAO,CAACK,cAAR,GAAyBA,cAAzB;AACAL,OAAO,CAACM,iBAAR,GAA4BA,iBAA5B;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAlC;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAET,IAAAA,OAAO,EAAES;AAAX,GAArC;AAAwD;;AAE/F,SAASR,QAAT,GAAoB;AAClB,MAAIU,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAEA;;AACA,MAAID,IAAI,CAACI,MAAL,IAAeJ,IAAI,CAACI,MAAL,KAAgB,CAAnC,EAAsC;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AACAN,IAAAA,IAAI,CAACO,OAAL,GAAeP,IAAI,CAACI,MAApB;AACD;AACD;;;AAGA,MAAII,IAAI,GAAGf,iBAAiB,CAACD,cAAc,CAACD,UAAU,CAACS,IAAI,CAACS,KAAN,CAAX,EAAyBT,IAAI,CAACU,IAA9B,EAAoCV,IAAI,CAACW,KAAzC,CAAf,EAAgEX,IAAI,CAACO,OAArE,EAA8EP,IAAI,CAACU,IAAnF,CAA5B;AACA;;AAEA,MAAIF,IAAI,CAACN,MAAL,GAAc,EAAlB,EAAsB;AACpB,UAAM,IAAIU,KAAJ,CAAU,sFAAV,CAAN;AACD;;AAED,SAAOJ,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASjB,UAAT,GAAsB;AACpB,MAAIkB,KAAK,GAAGR,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAhF;AACAQ,EAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,EAAQ,EAAR,CAAhB;;AAEA,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAIG,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,MAAIH,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAIG,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,MAAIE,OAAJ;;AAEA,UAAQL,KAAR;AACE,SAAK,CAAL;AACEK,MAAAA,OAAO,GAAG,CAAC,MAAD,CAAV;AACA;;AAEF,SAAK,CAAL;AACEA,MAAAA,OAAO,GAAG,CAAC,GAAGjB,OAAO,CAACkB,eAAZ,EAA6B,CAAC,CAAC,WAAD,EAAc,MAAd,CAAD,EAAwB,CAAC,MAAD,EAAS,MAAT,CAAxB,CAA7B,CAAV;AACA;;AAEF,SAAK,CAAL;AACED,MAAAA,OAAO,GAAG,CAAC,WAAD,EAAc,MAAd,EAAsB,MAAtB,CAAV;AACA;;AAEF,SAAK,CAAL;AACEA,MAAAA,OAAO,GAAG,CAAC,WAAD,EAAc,MAAd,EAAsB,MAAtB,EAA8B,MAA9B,CAAV;AACA;AAfJ;;AAkBA,SAAOA,OAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAStB,cAAT,CAAwBsB,OAAxB,EAAiCJ,IAAjC,EAAuCC,KAAvC,EAA8C;AAC5C,MAAIK,KAAK,GAAGF,OAAO,CAACG,GAAR,CAAY,UAAUC,IAAV,EAAgB;AACtC,QAAIC,iBAAiB,GAAGR,KAAK,GAAGjB,KAAK,CAACL,OAAN,CAAcsB,KAAd,CAAoB,GAAGS,MAAH,CAAUF,IAAV,EAAgB,GAAhB,CAApB,CAAH,GAA+CxB,KAAK,CAACL,OAAN,CAAc,GAAG+B,MAAH,CAAUF,IAAV,EAAgB,GAAhB,CAAd,CAA5E;AACA,WAAO,CAAC,GAAGrB,OAAO,CAACkB,eAAZ,EAA6BI,iBAA7B,CAAP;AACD,GAHW,CAAZ;AAIA,SAAOH,KAAK,CAACK,IAAN,CAAWX,IAAI,IAAI,GAAnB,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASjB,iBAAT,CAA2Be,IAA3B,EAAiC;AAC/B,MAAIc,GAAG,GAAGrB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAA9E;AACA,MAAIS,IAAI,GAAGT,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,GAA/E;AACAqB,EAAAA,GAAG,GAAGT,QAAQ,CAACS,GAAD,EAAM,EAAN,CAAd;;AAEA,MAAIA,GAAG,GAAG,CAAV,EAAa;AACX,UAAM,IAAIV,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAOJ,IAAI,IAAIc,GAAG,GAAGZ,IAAI,GAAG,CAAC,GAAGb,OAAO,CAAC0B,YAAZ,EAA0BD,GAA1B,CAAV,GAA2C,EAAlD,CAAX;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.getPattern = getPattern;\nexports.processPattern = processPattern;\nexports.addTrailingNumber = addTrailingNumber;\n\nvar _data = _interopRequireDefault(require(\"../data.json\"));\n\nvar _random = require(\"./random\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _default() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /* deprecations */\n  if (opts.numLen || opts.numLen === 0) {\n    console.log('namor: \"numLen\" is now deprecated, use \"numbers\" instead');\n    opts.numbers = opts.numLen;\n  }\n  /* generate the name */\n\n\n  var name = addTrailingNumber(processPattern(getPattern(opts.words), opts.char, opts.manly), opts.numbers, opts.char);\n  /* ensure final subdomain isn't too long */\n\n  if (name.length > 63) {\n    throw new Error('Subdomains cannot be longer than 63 characters! Try shortening your trailing number.');\n  }\n\n  return name;\n}\n/**\n * Returns a language pattern based on the word count of the name.\n * @param {integer} words - the number of words to use\n * @return {array} a list (in order) of the language pattern\n */\n\n\nfunction getPattern() {\n  var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  words = parseInt(words, 10);\n\n  if (words < 1) {\n    throw new Error('word count must be above 0');\n  }\n\n  if (words > 4) {\n    throw new Error('word count cannot be above 4');\n  }\n\n  var pattern;\n\n  switch (words) {\n    case 1:\n      pattern = ['noun'];\n      break;\n\n    case 2:\n      pattern = (0, _random.randomFromArray)([['adjective', 'noun'], ['noun', 'verb']]);\n      break;\n\n    case 3:\n      pattern = ['adjective', 'noun', 'verb'];\n      break;\n\n    case 4:\n      pattern = ['adjective', 'noun', 'noun', 'verb'];\n      break;\n  }\n\n  return pattern;\n}\n/**\n * Fills a language pattern with actual words from our dictionary,\n * and turns it into a pipe-cased string.\n * @param {array} pattern - the pattern to use\n * @return {string} the concated string\n */\n\n\nfunction processPattern(pattern, char, manly) {\n  var fills = pattern.map(function (type) {\n    var wordsToChooseFrom = manly ? _data.default.manly[\"\".concat(type, \"s\")] : _data.default[\"\".concat(type, \"s\")];\n    return (0, _random.randomFromArray)(wordsToChooseFrom);\n  });\n  return fills.join(char || '-');\n}\n/**\n * Generates and adds a random number to the end of a name.\n * @param {string} name - the name to append to\n * @param {integer} len - the length of the trailing number\n * @return {string} the new name\n */\n\n\nfunction addTrailingNumber(name) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';\n  len = parseInt(len, 10);\n\n  if (len < 0) {\n    throw new Error('number length must be above 0');\n  }\n\n  return name + (len ? char + (0, _random.randomNumber)(len) : '');\n}"]},"metadata":{},"sourceType":"script"}