[{"C:\\Users\\ATM\\Desktop\\Dash\\src\\index.js":"1","C:\\Users\\ATM\\Desktop\\Dash\\src\\App.js":"2","C:\\Users\\ATM\\Desktop\\Dash\\src\\components\\Dashboard.js":"3","C:\\Users\\ATM\\Desktop\\Dash\\src\\components\\Sidebar.js":"4","C:\\Users\\ATM\\Desktop\\Dash\\src\\components\\ReactTable.js":"5","C:\\Users\\ATM\\Desktop\\Dash\\src\\components\\markData.js":"6"},{"size":220,"mtime":1643105906712,"results":"7","hashOfConfig":"8"},{"size":546,"mtime":1643611287494,"results":"9","hashOfConfig":"8"},{"size":17566,"mtime":1643630045710,"results":"10","hashOfConfig":"8"},{"size":2119,"mtime":1643292997413,"results":"11","hashOfConfig":"8"},{"size":4300,"mtime":1643356778106,"results":"12","hashOfConfig":"8"},{"size":946,"mtime":1643607331931,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1pbr57r",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ATM\\Desktop\\Dash\\src\\index.js",[],["28","29"],"C:\\Users\\ATM\\Desktop\\Dash\\src\\App.js",[],"C:\\Users\\ATM\\Desktop\\Dash\\src\\components\\Dashboard.js",["30","31","32"],"C:\\Users\\ATM\\Desktop\\Dash\\src\\components\\Sidebar.js",[],"C:\\Users\\ATM\\Desktop\\Dash\\src\\components\\ReactTable.js",["33"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTable, useExpanded,useSortBy } from \"react-table\";\r\nimport makeData from \"./markData\";\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Table({ columns: userColumns, data }) {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    state: { expanded },\r\n\r\n  } = useTable(\r\n    {\r\n      columns: userColumns,\r\n      data,\r\n     \r\n    },\r\n    useSortBy,\r\n    useExpanded ,// Use the useExpanded plugin hook\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render(\"Header\")}\r\n                 {/* Add a sort direction indicator */}\r\n                 <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? ' ðŸ”½'\r\n                        : ' ðŸ”¼'\r\n                      : ''}\r\n                  </span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n      {/* <div>Showing the first 20 results of {rows.length} rows</div> */}\r\n      {/* <pre>\r\n        <code>{JSON.stringify({ expanded: expanded }, null, 2)}</code>\r\n      </pre> */}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ReactTable() {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        // Build our expander column\r\n        id: \"expander\", // Make sure it has an ID\r\n        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n          <span {...getToggleAllRowsExpandedProps()}>\r\n            {isAllRowsExpanded ? \"ðŸ‘‡\" : \"ðŸ‘‰\"}\r\n          </span>\r\n        ),\r\n        Cell: ({ row }) =>\r\n          // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n          // to build the toggle for expanding a row\r\n          row.canExpand ? (\r\n            <span\r\n              {...row.getToggleRowExpandedProps({\r\n                style: {\r\n                  // We can even use the row.depth property\r\n                  // and paddingLeft to indicate the depth\r\n                  // of the row\r\n                  paddingLeft: `${row.depth * 2}rem`,\r\n                },\r\n              })}\r\n            >\r\n              {row.isExpanded ? \"ðŸ‘‡\" : \"ðŸ‘‰\"}\r\n            </span>\r\n          ) : null,\r\n      },\r\n      {\r\n        Header: \"Name\",\r\n        columns: [\r\n          {\r\n            Header: \"First Name\",\r\n            accessor: \"firstName\",\r\n          },\r\n          {\r\n            Header: \"Last Name\",\r\n            accessor: \"lastName\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        Header: \"Info\",\r\n        columns: [\r\n          {\r\n            Header: \"Age\",\r\n            accessor: \"age\",\r\n          },\r\n          {\r\n            Header: \"Visits\",\r\n            accessor: \"visits\",\r\n          },\r\n          {\r\n            Header: \"Status\",\r\n            accessor: \"status\",\r\n          },\r\n          {\r\n            Header: \"Profile Progress\",\r\n            accessor: \"progress\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const data = React.useMemo(() => makeData(5, 5, 5), []);\r\n\r\n  return (\r\n    <Styles>\r\n      <Table columns={columns} data={data} />\r\n    </Styles>\r\n  );\r\n}\r\n\r\nexport default ReactTable;\r\n","C:\\Users\\ATM\\Desktop\\Dash\\src\\components\\markData.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":10,"column":10,"nodeType":"40","messageId":"41","endLine":10,"endColumn":17},{"ruleId":"38","severity":1,"message":"42","line":17,"column":10,"nodeType":"40","messageId":"41","endLine":17,"endColumn":14},{"ruleId":"38","severity":1,"message":"43","line":17,"column":16,"nodeType":"40","messageId":"41","endLine":17,"endColumn":23},{"ruleId":"38","severity":1,"message":"44","line":42,"column":14,"nodeType":"40","messageId":"41","endLine":42,"endColumn":22},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'subData' is assigned a value but never used.","Identifier","unusedVar","'icon' is assigned a value but never used.","'setIcon' is assigned a value but never used.","'expanded' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]